apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'androidx.navigation.safeargs'

def keystoreProperties = new Properties()
def shouldSign = file("../Secrets/KeyStore/keystore.properties").exists()
if (shouldSign) {
    keystoreProperties.load(new FileInputStream(file("../Secrets/KeyStore/keystore.properties")))
}

android {
    compileSdkVersion 29

    defaultConfig {
        applicationId "com.jaqxues.sniptools"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        if (shouldSign) {
            release {
                keyAlias = keystoreProperties['keyAlias']
                keyPassword = keystoreProperties['keyPassword']
                storeFile = file(keystoreProperties['keyStorePath'])
                storePassword = keystoreProperties['keyStorePassword']
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            if (shouldSign) {
                signingConfig = signingConfigs.release
            }
        }
    }

    buildFeatures {
        compose true
    }

    // To inline the bytecode built with JVM target 1.8 into
    // bytecode that is being built with JVM target 1.6. (e.g. navArgs)
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
        useIR = true
    }

    dynamicFeatures = [":packimpl"]

    composeOptions {
        kotlinCompilerExtensionVersion "1.0.0-alpha04"
    }
}

dependencies {
    // Dependency Versions
    def koin_version = '2.1.5'
    def lifecycle_version = '2.2.0'


    api fileTree(dir: 'libs', include: ['*.jar'])
    api "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    api 'androidx.appcompat:appcompat:1.2.0'
    api 'androidx.core:core-ktx:1.3.1'
    api 'androidx.legacy:legacy-support-v4:1.0.0'
    api 'com.google.android.material:material:1.2.1'
    api 'androidx.constraintlayout:constraintlayout:2.0.1'
    testImplementation 'junit:junit:4.13'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    api 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.9'

    // ViewModel and LiveData
    api "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    api "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    api "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"


    // Service Locator (Dependency Injection)
    api "org.koin:koin-android:$koin_version"
    api "org.koin:koin-androidx-scope:$koin_version"
    api "org.koin:koin-androidx-viewmodel:$koin_version"
//    implementation "org.koin:koin-androidx-fragment:$koin_version"

    api 'com.jakewharton.timber:timber:4.7.1'
    api 'com.squareup.retrofit2:retrofit:2.9.0'

    compileOnly 'de.robv.android.xposed:api:82'
    compileOnly 'de.robv.android.xposed:api:82:sources'

    api('com.github.jaqxues:Akrolyb:23019eba81') {
        changing = true
    }

    def compose_version = '1.0.0-alpha04'
    api "androidx.compose.ui:ui:$compose_version"
    api "androidx.compose.material:material:$compose_version"
    api "androidx.ui:ui-tooling:$compose_version"
    api "androidx.compose.runtime:runtime-livedata:$compose_version"

    // debugApi 'com.amitshekhar.android:debug-db:1.0.6'
    // Files built by fork to allow for 2 different Contexts (+ AndroidX support)
    // https://github.com/jaqxues/Android-Debug-Database
    debugApi files('libs/debug-db-debug.aar')
    debugApi files('libs/debug-db-base-debug.aar')
}

configurations.all {
    resolutionStrategy {
        cacheChangingModulesFor 0, 'seconds'
    }
}
